@startuml
class Connect4 {
  - Board board
  - Turn turn
  - BoardConsoleView BoardConsoleView
  - TurnConsoleView turnView

  + void playGames()
  - void playGame()
  - boolean isResumed()
}

class YesNoDialog {
  {static} - AFFIRMATIVE
  {static} - NEGATIVE
  {static} - SUFFIX
  {static} - MESSAGE
  - answer

  + void read(message)
  + isAffirmative()
  - isNegative()
  - getAnswer()
}

class Turn {
  {static} - NUMBERS_PLAYERS
  - [Player] players
  - number activePlayer
  - Board board

  + void reset()
  + void nextTurn()
  + boolean isFinished()
  + boolean isWinner()
  + Player getActivePlayer()
}

class TurnConsoleView {
  - Turn turn

  + void play()
  + void writeResult()
}

class Board {
  - [Color] colors
  - Coordinate lastDrop

  - void reset()
  + void dropToken(column, color)
  + boolean isComplete(column)
  + boolean isFinished()
  + boolean isWinner()
  - boolean isConnect4(line)
  - boolean isOccupied(coordinate, color)
  - boolean isEmpty(coordinate)
  - string getColor(coordinate)
}

class BoardConsoleView {
  - Board board

  + void writeln()
  - void writeHorizontal()
}

class Message{
  {static} TITLE
  {static} HORIZONTAL_LINE
  {static} VERTICAL_LINE
  {static} TURN
  {static} ENTER_COLUMN_TO_DROP
  {static} INVALID_COLUMN
  {static} COMPLETED_COLUMN
  {static} PLAYER_WIN
  {static} PLAYERS_TIED
  {static} RESUM
  - string string

  + void write()
  + void writeln()
  + string toString()
}

class Player {
  - Color color
  - Board board

  + void dropToken(column)
  + boolean isComplete(column)
  + Color getColor()
}

class PlayerConsoleView {
  - Player player

  + void play()
  + void writeWinner()
}

class Color {
  - {static} RED
  - {static} YELLOW
  - {static} NULL
  - string string

  + {static} get(ordinal)
  - {static} values()
  + string toString()
}

class ColorConsoleView {
  - Colro color

  + void write()
}

class Coordinate {
  {static} ORIGIN
  {static} NUMBER_ROWS
  {static} #ROWS
  {static} NUMBER_COLUMNS
  {static} #COLUMNS
  - number row
  - number column

  + Coordinate shifted(coordinate)
  + boolean isValid()
  + {static} boolean isColumnValid(column)
  - {static} boolean isRowValid(row)
  + number getRow()
  + number getColumn()
  + boolean equals(coordinate)
  + string toString()
}

class Direction {
  {static} NORTH
  {static} NORTH_EAST
  {static} EAST
  {static} SOUTH_EAST
  {static} SOUTH
  {static} SOUTH_WEST
  {static} WEST
  {static} NORTH_WEST
  - Coordinate coordinate

  + Direction getOposite()
  - {static} [Direction] values()
  + Coordinate getCoordinate()
  - {static} halfValues()
}

class Line {
  + {static} LENGTH = 4
  - Coordinate origin
  - [Coordinate] coordinates
  - Direction oppositeDirection

  + void set(direction)
  + void shift()
  + [Coordinate] getCoordinate()
}

class ClosedInterval {
  - number min
  - number max

  + boolean isInclude(value)
}

Connect4 *-- Board
Connect4 *-- Turn
Connect4 ..> Message
Connect4 ..> YesNoDialog
Connect4 *-- BoardConsoleView
Connect4 *-- TurnConsoleView

Turn --> Board
Turn --> "2"Player

TurnConsoleView *-- Turn
TurnConsoleView ..> Message
TurnConsoleView --> PlayerConsoleView

Player *-- Color
Player --> Board

PlayerConsoleView *-- Player
PlayerConsoleView ..> Message

Board o-- "*" Color
Board --> "*" Coordinate
Board ..> Direction
Board ..> Line
Board ..> Message

BoardConsoleView *-- Board
BoardConsoleView ..> Message
BoardConsoleView ..> Coordinate
BoardConsoleView ..> ColorConsoleView

Line *-- "*" Coordinate
Line *-- Direction

Message --> Message

Direction --> Direction
Direction --> "*" Coordinate

Coordinate --> "*" ClosedInterval

Color --> Color

ColorConsoleView *-- Color
@enduml